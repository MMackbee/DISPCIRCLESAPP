{"ast":null,"code":"var _jsxFileName = \"/Users/makelmackbee/dispcirclesapp/src/App.js\",\n  _s = $RefreshSig$();\n// src/App.js\n\nimport React, { useEffect, useState } from \"react\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport { auth } from \"./firebase\";\nimport AppRoutes from \"./AppRoutes\";\nimport Spinner from \"./Spinner\"; // Using your Spinner component\nimport \"./index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // onAuthStateChanged listener to update user state\n    const unsubscribe = onAuthStateChanged(auth, user => {\n      setCurrentUser(user);\n      setLoading(false);\n    });\n    // Cleanup subscription on unmount\n    return unsubscribe;\n  }, []);\n\n  // Show a spinner while checking authentication state\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Spinner, {\n      message: \"Authenticating...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 12\n    }, this);\n  }\n\n  // FIXED: Pass props with the correct names `currentUser` and `setCurrentUser`\n  // that AppRoutes.js is expecting.\n  return /*#__PURE__*/_jsxDEV(AppRoutes, {\n    currentUser: currentUser,\n    setCurrentUser: setCurrentUser\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 10\n  }, this);\n}\n_s(App, \"+Bt7EujFHjK6mRV3YX1iAtSqXvQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","onAuthStateChanged","auth","AppRoutes","Spinner","jsxDEV","_jsxDEV","App","_s","currentUser","setCurrentUser","loading","setLoading","unsubscribe","user","message","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/makelmackbee/dispcirclesapp/src/App.js"],"sourcesContent":["// src/App.js\n\nimport React, { useEffect, useState } from \"react\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport { auth } from \"./firebase\";\nimport AppRoutes from \"./AppRoutes\";\nimport Spinner from \"./Spinner\"; // Using your Spinner component\nimport \"./index.css\";\n\nfunction App() {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // onAuthStateChanged listener to update user state\n    const unsubscribe = onAuthStateChanged(auth, (user) => {\n      setCurrentUser(user);\n      setLoading(false);\n    });\n    // Cleanup subscription on unmount\n    return unsubscribe;\n  }, []);\n\n  // Show a spinner while checking authentication state\n  if (loading) {\n    return <Spinner message=\"Authenticating...\" />;\n  }\n\n  // FIXED: Pass props with the correct names `currentUser` and `setCurrentUser`\n  // that AppRoutes.js is expecting.\n  return <AppRoutes currentUser={currentUser} setCurrentUser={setCurrentUser} />;\n}\n\nexport default App;\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,kBAAkB,QAAQ,eAAe;AAClD,SAASC,IAAI,QAAQ,YAAY;AACjC,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,OAAO,MAAM,WAAW,CAAC,CAAC;AACjC,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd;IACA,MAAMc,WAAW,GAAGZ,kBAAkB,CAACC,IAAI,EAAGY,IAAI,IAAK;MACrDJ,cAAc,CAACI,IAAI,CAAC;MACpBF,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC;IACF;IACA,OAAOC,WAAW;EACpB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,IAAIF,OAAO,EAAE;IACX,oBAAOL,OAAA,CAACF,OAAO;MAACW,OAAO,EAAC;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAChD;;EAEA;EACA;EACA,oBAAOb,OAAA,CAACH,SAAS;IAACM,WAAW,EAAEA,WAAY;IAACC,cAAc,EAAEA;EAAe;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAChF;AAACX,EAAA,CAtBQD,GAAG;AAAAa,EAAA,GAAHb,GAAG;AAwBZ,eAAeA,GAAG;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}